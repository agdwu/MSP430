#include "Bsp_i2c.h"


#define SUCCESS 1

void Delay(u32 count)//400KHzIIC
{
    unsigned int uiCnt = (count*8)/3;
    while (uiCnt --);
}

//初始化IIC
void IIC_Init(void)
{
    GPIO_setAsOutputPin(SDA_PORT,SDA_PIN ); //CLK
    GPIO_setAsOutputPin(SCL_PORT,SCL_PIN);//DIN
    IIC_SCL_High();
    IIC_SDA_High();
}
//产生IIC起始信号
void IIC_Start(void)//SDA 10 SCL 010
{
    SDA_OUT();     //sda线输出
    IIC_SCL_High();
    IIC_SDA_High();
    Delay(10);
    IIC_SDA_Low();//START:when CLK is high,DATA change form high to low
    Delay(10);
    IIC_SCL_Low();//钳住I2C总线，准备发送或接收数据
}
//产生IIC停止信号
void IIC_Stop(void)//SDA 01 SCL 01
{
    SDA_OUT();//sda线输出
    IIC_SCL_Low();//STOP:when CLK is high DATA change form low to high
    IIC_SDA_Low();
    Delay(12);
    IIC_SCL_High();
    IIC_SDA_High();//发送I2C总线结束信号
    Delay(12);
}
//等待应答信号到来
//返回值：1，接收应答失败
//        0，接收应答成功
u8 IIC_Wait_Ack_R(void)//
{
    u8 cy;
    SDA_IN();      //SDA设置为输入
    IIC_SCL_High();delay_us(10);
    IIC_SDA_High();delay_us(10);
    if(READ_SDA){
        cy=1;
        IIC_SCL_Low();
        return cy;
    }else{
        cy=0;
    }
    IIC_SCL_Low();//时钟输出0
    return cy;
}
//无应答
void IIC_Wait_Ack_NO_R(void)
{
    IIC_SCL_High();
    IIC_SCL_Low();
}
//产生ACK应答
void IIC_Ack(void)
{
    IIC_SCL_Low();
    SDA_OUT();
    IIC_SDA_Low();
    Delay(10);
    IIC_SCL_High();
    Delay(10);
    IIC_SCL_Low();
}
//不产生ACK应答
void IIC_NAck(void)
{
    IIC_SCL_Low();
    SDA_OUT();
    IIC_SDA_High();
    Delay(10);
    IIC_SCL_High();
    Delay(10);
    IIC_SCL_Low();
}
//IIC发送一个字节
//返回从机有无应答
//1，有应答
//0，无应答
void IIC_Send_Byte(u8 txd)
{
    u8 t;
    SDA_OUT();
    IIC_SCL_Low();//拉低时钟开始数据传输
    Delay(4);
    for(t=0;t<8;t++)
    {
        if(txd&0x80){
            IIC_SDA_High();Delay(4);
        }else{
            IIC_SDA_Low();Delay(4);
        }
        txd<<=1;
        IIC_SCL_High();
        Delay(10);
        IIC_SCL_Low();
        Delay(6);
    }
}

void OLED_IIC_SendByte(u8 byte)
{
    u8 i;
    SDA_OUT();
    IIC_SCL_Low();
    for(i=0;i<8;i++)
    {
        if(byte&0x80) IIC_SDA_High();
        else IIC_SDA_Low();
        byte<<=1;
        IIC_SCL_High();
        IIC_SCL_Low();
    }
}


//读1个字节，ack=1时，发送ACK，ack=0，发送nACK
u8 IIC_Read_Byte(unsigned char ack)
{
    unsigned char i,receive=0;
    SDA_IN();//SDA设置为输入
    for(i=0;i<8;i++ )
    {
        IIC_SCL_Low();
        Delay(5);
        IIC_SCL_High();
        receive<<=1;
        if(READ_SDA)
            receive++;
        Delay(5);
    }
    if (!ack)
        IIC_NAck();//发送nACK
    else
        IIC_Ack(); //发送ACK
    return receive;

}


int32_t I2cWrite(uint8_t ucAddr, uint8_t ucReg, uint8_t *p_ucVal, uint32_t uiLen)
{
    uint32_t i = 0;
    IIC_Start();
    IIC_Send_Byte(ucAddr);
    if(IIC_Wait_Ack_R() != SUCCESS)return 0;
    IIC_Send_Byte(ucReg);
    if(IIC_Wait_Ack_R() != SUCCESS)return 0;
    for(i = 0; i < uiLen; i++){
        IIC_Send_Byte(*p_ucVal++);
        if(IIC_Wait_Ack_R() != SUCCESS)return 0;
    }
    IIC_Stop();
    return 1;
}

int32_t I2cRead(uint8_t ucAddr, uint8_t ucReg, uint8_t *p_ucVal, uint32_t uiLen)
{
    uint32_t i = 0;
    IIC_Start();
    IIC_Send_Byte(ucAddr);
    if(IIC_Wait_Ack_R() != SUCCESS)return 0;
    IIC_Send_Byte(ucReg);
    if(IIC_Wait_Ack_R() != SUCCESS)return 0;

    IIC_Start();
    IIC_Send_Byte(ucAddr+1);
    for(i = 0; i < uiLen; i++){
        if(i+1 == uiLen){*p_ucVal++ = IIC_Read_Byte(0);}//last byte no ask
        else {*p_ucVal++ = IIC_Read_Byte(1);}//  ask
    }
    IIC_Stop();
    return 1;
}

